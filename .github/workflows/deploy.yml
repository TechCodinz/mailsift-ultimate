name: Deploy MailSift Ultimate

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        pytest tests/ --cov=. --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: |
          mailsift/ultimate:latest
          mailsift/ultimate:${{ github.sha }}
        cache-from: type=registry,ref=mailsift/ultimate:buildcache
        cache-to: type=registry,ref=mailsift/ultimate:buildcache,mode=max
    
    - name: Deploy to Kubernetes
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl set image deployment/mailsift-ultimate \
          mailsift=mailsift/ultimate:${{ github.sha }} \
          --record
        kubectl rollout status deployment/mailsift-ultimate
    
    - name: Run smoke tests
      run: |
        sleep 30
        curl -f https://api.mailsift.com/health || exit 1
    
    - name: Notify Slack
      uses: slack/action@v1
      with:
        webhook-url: ${{ secrets.SLACK_WEBHOOK }}
        message: "Deployment successful! Version: ${{ github.sha }}"

  monitor:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Create Sentry release
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: mailsift
        SENTRY_PROJECT: ultimate
      with:
        environment: production
        version: ${{ github.sha }}

